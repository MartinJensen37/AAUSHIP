#include <math.h>
#include "ros/ros.h"
#include "aauship_control/ADIS16405.h"
#include "sensor_msgs/Imu.h"
#include <math.h>
#include "ros/ros.h"
#include "aauship_control/ADIS16405.h"
#include "sensor_msgs/Imu.h"

float q0, q1, q2, q3;
q0 = 1.0;                                // quaternion of sensor frame relative to auxiliary frame
q1 = 0.0;
q2 = 0.0;
q3 = 0.0;

float eulerAngleX;
float eulerAngleY;
float eulerAngleZ;
eulerAngleX = 0.0;
eulerAngleY = 0.0;
eulerAngleZ = 0.0;

void IMUSupdate(float xgyro, float ygyro, float zgyro, float xacc, float yacc, float zacc, float xmag, float ymag, float zmag)
{
	float recipNorm;
	float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	float hx, hy, bx, bz;
	float halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	float halfex, halfey, halfez;
	float qa, qb, qc;
	if ((xmag == 0.0f) && (ymag == 0.0f) && (zmag == 0.0f)) {
		IMUSupdateIMU(xgyro, ygyro, zgyro, xacc, yacc, zacc);
		return;
	}
	if (!((xacc == 0.0f) && (yacc == 0.0f) && (zacc == 0.0f))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt(xacc * xacc + yacc * yacc + zacc * zacc);
		xacc *= recipNorm;
		yacc *= recipNorm;
		zacc *= recipNorm;

		// Normalise magnetometer measurement
		recipNorm = invSqrt(xmag * xmag + ymag * ymag + zmag * zmag);
		xmag *= recipNorm;
		ymag *= recipNorm;
		zmag *= recipNorm;

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
		q0q1 = q0 * q1;
		q0q2 = q0 * q2;
		q0q3 = q0 * q3;
		q1q1 = q1 * q1;
		q1q2 = q1 * q2;
		q1q3 = q1 * q3;
		q2q2 = q2 * q2;
		q2q3 = q2 * q3;
		q3q3 = q3 * q3;

		// Reference direction of Earth's magnetic field
		hx = 2.0f * (xmag * (0.5f - q2q2 - q3q3) + ymag * (q1q2 - q0q3) + zmag * (q1q3 + q0q2));
		hy = 2.0f * (xmag * (q1q2 + q0q3) + ymag * (0.5f - q1q1 - q3q3) + zmag * (q2q3 - q0q1));
		bx = sqrt(hx * hx + hy * hy);
		bz = 2.0f * (xmag * (q1q3 - q0q2) + ymag * (q2q3 + q0q1) + zmag * (0.5f - q1q1 - q2q2));

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5f + q3q3;
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);

		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (yacc * halfvz - zacc * halfvy) + (ymag * halfwz - zmag * halfwy);
		halfey = (zacc * halfvx - xacc * halfvz) + (zmag * halfwx - xmag * halfwz);
		halfez = (xacc * halfvy - yacc * halfvx) + (xmag * halfwy - ymag * halfwx);

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
			xgyro += integralFBx;	// apply integral feedback
			ygyro += integralFBy;
			zgyro += integralFBz;
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		xgyro += twoKp * halfex;
		ygyro += twoKp * halfey;
		zgyro += twoKp * halfez;
	}

	// Integrate rate of change of quaternion
	xgyro *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
	ygyro *= (0.5f * (1.0f / sampleFreq));
	zgyro *= (0.5f * (1.0f / sampleFreq));
	qa = q0;
	qb = q1;
	qc = q2;
	q0 += (-qb * xgyro - qc * ygyro - q3 * zgyro);
	q1 += (qa * xgyro + qc * zgyro - q3 * ygyro);
	q2 += (qa * ygyro - qb * zgyro + q3 * xgyro);
	q3 += (qa * zgyro + qb * ygyro - qc * xgyro);

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
	q0 *= recipNorm;
	q1 *= recipNorm;
	q2 *= recipNorm;
	q3 *= recipNorm;
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update
void IMUSupdateIMU(float xgyro, float ygyro, float zgyro, float xacc, float yacc, float zacc) {
	float recipNorm;
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((xacc == 0.0f) && (yacc == 0.0f) && (zacc == 0.0f))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt(xacc * xacc + yacc * yacc + zacc * zacc);
		xacc *= recipNorm;
		yacc *= recipNorm;
		zacc *= recipNorm;

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
		halfvy = q0 * q1 + q2 * q3;
		halfvz = q0 * q0 - 0.5f + q3 * q3;

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (yacc * halfvz - zacc * halfvy);
		halfey = (zacc * halfvx - xacc * halfvz);
		halfez = (xacc * halfvy - yacc * halfvx);

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
			xgyro += integralFBx;	// apply integral feedback
			ygyro += integralFBy;
			zgyro += integralFBz;
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		xgyro += twoKp * halfex;
		ygyro += twoKp * halfey;
		zgyro += twoKp * halfez;
	}

	// Integrate rate of change of quaternion
	xgyro *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
	ygyro *= (0.5f * (1.0f / sampleFreq));
	zgyro *= (0.5f * (1.0f / sampleFreq));
	qa = q0;
	qb = q1;
	qc = q2;
	q0 += (-qb * xgyro - qc * ygyro - q3 * zgyro);
	q1 += (qa * xgyro + qc * zgyro - q3 * ygyro);
	q2 += (qa * ygyro - qb * zgyro + q3 * xgyro);
	q3 += (qa * zgyro + qb * ygyro - qc * xgyro);

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
	q0 *= recipNorm;
	q1 *= recipNorm;
	q2 *= recipNorm;
	q3 *= recipNorm;
}


// http://diydrones.com/forum/topics/madgwick-imu-ahrs-and-fast-inverse-square-root?id=705844%3ATopic%3A1018435&page=1#comments
float invSqrt(float x) {
	//   uint32_t i = 0x5F1F1412 - (*(uint32_t*)&x >> 1);
	unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
	float tmp = *(float*)&i;
	return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
}

//void calculateEulerAngles(void)
//{
//	eulerAngleX = atan2(2 * (q0*q1 + q2*q3), 1 - 2 * (q1*q1 + q2*q2));
//	eulerAngleY = asin(2 * (q0*q2 - q1*q3));
//	eulerAngleZ = atan2(2 * (q0*q3 + q1*q2), 1 - 2 * (q2*q2 + q3*q3));
//}

//float getEulerAngles(int axes)
//{
//	switch (axes)
//	{
//	case 0: return eulerAngleX;
//	case 1: return eulerAngleY;
//	case 2: return eulerAngleZ;
//	}
//	return 0;
//}

float getQuaternions(int axes)
{
	switch (axes)
	{
	case 0: return q0;
	case 1: return q1;
	case 2: return q2;
	case 3: return q3;
	}
	return 0;
}

//float getTuning(int idx)
//{
//	switch (idx)
//	{
//	case 0: return twoKp;
//	case 1: return twoKi;
//	}
//	return 0;
//}
//
//void setTuning(float kp, float ki)
//{
//	twoKp = kp;
//	twoKi = ki;
//}
//
//
//float getSampleFreq(void)
//{
//	return sampleFreq;
//}
//
//void setSampleFreq(float fs)
//{
//	sampleFreq = fs;
//}
